---
import PageLayout from "@/layouts/Base";
import { getAllPodcasts, sortPodcastByDate } from "@/utils";
import PodcastCard from "@/components/PodcastCard";
import Pagination from "@/components/Pagination";
import { PODCASTS_PER_PAGE, siteConfig } from "@/site-config";

const allPodcasts = await getAllPodcasts();
const allPodcastsByDate = sortPodcastByDate(allPodcasts);
const totalPages = Math.ceil(allPodcastsByDate.length / PODCASTS_PER_PAGE);
const initialPodcasts = allPodcastsByDate.slice(0, PODCASTS_PER_PAGE);
---

<PageLayout meta={{ title: "Podcast" }}>
  <section>
    <h1 class="title mb-6">{siteConfig.podcast.title}</h1>
    <p class="mb-4">{siteConfig.podcast.subtitle}</p>
  </section>
  <section aria-label="Podcast list" class="mt-16">
    <div class="card min-w-full bg-base-100 shadow-md p-3 pb-3 mt-12">
      {
        initialPodcasts.map((episode, index) => {
          return (
            <PodcastCard
              title={episode.data.title}
              url={episode.data.audioUrl}
              audioUrl={episode.data.audioUrl}
              pubDate={episode.data.publishDate}
              duration={episode.data.duration}
              updateDate={episode.data.updatedDate}
              slug={episode.slug}
              id={`card-${index}`}
            />
          );
        })
      }
    </div>
    {totalPages > 1 && (
      <Pagination length={totalPages} currentPage={1} firstUrl="/podcast" prevUrl={null} nextUrl={totalPages > 1 ? "/podcast/2" : null} />
    )}
  </section>
</PageLayout>

<script lang="ts">
  function initializePodcastCards() {
    let currentAudioPlayer = null;
    let currentPlayButton = null;

    const podcastCards = document.querySelectorAll('.episode-card');

    podcastCards.forEach((card) => {
      const id = card.id.split('episode-card-')[1];

      const playButtons = card.querySelectorAll('.card-play-buttons');
      const audioPlayerElement = document.getElementById(`audio-player-${id}`);

      const seekSlider = card.querySelector(`#seek-slider-${id}`);

      const displayDuration = () => {
        if (seekSlider) {
          seekSlider.max = audioPlayerElement.duration.toString();
        }
      };
      audioPlayerElement.addEventListener('loadedmetadata', () => {
        displayDuration();
      });

      playButtons.forEach((btn) => {
        btn.addEventListener('change', () => {
          if (btn.checked) {
            audioPlayerElement.src = btn.dataset.audioUrl;
            if (currentAudioPlayer && currentAudioPlayer !== audioPlayerElement) {
              currentAudioPlayer.pause();
              currentPlayButton.checked = false;
            }
            currentAudioPlayer = audioPlayerElement;
            currentPlayButton = btn;
            audioPlayerElement.play().catch((error) => {
              if (error.name !== 'AbortError') {
                console.error('Audio play interrupted:', error);
              }
            });
          } else {
            audioPlayerElement.pause();
          }
        });
      });

      seekSlider?.addEventListener('input', () => {
        audioPlayerElement.currentTime = parseFloat(seekSlider.value);
      });

      seekSlider.addEventListener('change', () => {
        audioPlayerElement.currentTime = parseFloat(seekSlider.value);
      });

      audioPlayerElement.addEventListener('timeupdate', () => {
        if (seekSlider) {
          seekSlider.value = Math.floor(audioPlayerElement.currentTime).toString();
        }
      });

      audioPlayerElement.addEventListener('play', () => {
        if (currentPlayButton) {
          currentPlayButton.checked = true;
        }
      });

      audioPlayerElement.addEventListener('pause', () => {
        if (currentPlayButton) {
          currentPlayButton.checked = false;
        }
      });
    });
  }

  function stopPlayingAudio() {
    const audioPlayers = document.querySelectorAll('audio');
    audioPlayers.forEach(audio => {
      if (!audio.paused) {
        audio.pause();
      }
    });
  }

  document.addEventListener('astro:page-load', initializePodcastCards);
  document.addEventListener('astro:after-swap', initializePodcastCards);
  document.addEventListener('DOMContentLoaded', initializePodcastCards);
  document.addEventListener('astro:before-swap', stopPlayingAudio);
  document.addEventListener('beforeunload', stopPlayingAudio);
</script>
