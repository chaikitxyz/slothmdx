---
const { title, desc, duration, displayDate, audioUrl, id, slug } = Astro.props;
import PlayIcon from './icons/playIcon.astro';
import PauseIcon from './icons/pauseIcon.astro';

function formatTime(secs: any) {
  if (isNaN(secs) || secs < 0) {
    const segmentedTime = secs.split(':');
    return segmentedTime[0] == '00' || segmentedTime[0] == '0' ? secs : null;
  }

  const hours = Math.floor(secs / 3600);
  const minutes = Math.floor((secs % 3600) / 60);
  const seconds = Math.floor(secs % 60);
  const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
  const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;

  return hours > 0
    ? `${hours}:${formattedMinutes}:${formattedSeconds}`
    : `${formattedMinutes}:${formattedSeconds}`;
}
const displayDuration = formatTime(duration);
---

<div class='episode-card' id={`episode-card-${id}`}>
  <div class='flex justify-center items-center max-w-7xl p-4 gap-4 flex-row'>
    <div class='grow w-full overflow-auto'>
      <h2 class='md:text-xl text-sm font-semibold truncate'>
        <a href={`/podcast/${slug}/`} class='sloth-link' data-astro-prefetch>
          {title}
        </a>
      </h2>
      <input
        id={`seek-slider-${id}`}
        type='range'
        min='0'
        max='0'
        value='0'
        class='range range-xs my-2 flex-grow'
      />
      <p class='text-xs font-medium opacity-60'>
        {displayDuration && displayDuration + ' â€¢ '}
        {displayDate}
      </p>
      <p class='my-1 text-xs md:text-sm line-clamp-2'>{desc}</p>
    </div>
    <label class='btn btn-circle md:mx-2 swap'>
      <input
        type='checkbox'
        class='card-play-buttons'
        id={`play-button-${id}`}
        data-audio-url={audioUrl}
        aria-label='Play and pause'
      />
      <div class='swap-off'>
        <PauseIcon />
      </div>
      <div class='swap-on'>
        <PlayIcon />
      </div>
    </label>
  </div>
  <hr class='my-3 border-base-content opacity-[.15]' />
</div>

<style>
  .swap input {
    display: none;
  }
  .swap-off {
    display: none;
  }
  .swap input:checked ~ .swap-off {
    display: block;
  }
  .swap input:checked ~ .swap-on {
    display: none;
  }
  .card-play-buttons {
    width: 24px;
    height: 24px;
    position: absolute;
    opacity: 0;
  }
  .episode-card {
    position: relative;
  }
  .episode-card .btn-circle {
    position: relative;
  }
  .episode-card .btn-circle .swap-off,
  .episode-card .btn-circle .swap-on {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  .episode-card .btn-circle .swap-off svg,
  .episode-card .btn-circle .swap-on svg {
    width: 24px;
    height: 24px;
  }
  .episode-card:last-child hr {
    display: none;
  }
  .text-center {
    text-align: center;
  }
</style>

<script lang='ts'>
  document.addEventListener('DOMContentLoaded', function () {
    let currentAudioPlayer = null;
    let currentPlayButton = null;

    function initializePodcastCards() {
      const podcastCards = document.querySelectorAll('.episode-card');

      podcastCards.forEach((card) => {
        const id = card.id.split('episode-card-')[1];

        const playButtons = card.querySelectorAll('.card-play-buttons');
        const audioPlayerElement = new Audio();
        audioPlayerElement.preload = 'metadata';

        const seekSlider = card.querySelector(`#seek-slider-${id}`);

        const calculateTime = (secs) => {
          const hours = Math.floor(secs / 3600);
          const minutes = Math.floor((secs % 3600) / 60);
          const seconds = Math.floor(secs % 60);
          const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
          const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;

          return hours > 0
            ? `${hours}:${formattedMinutes}:${formattedSeconds}`
            : `${formattedMinutes}:${formattedSeconds}`;
        };

        const displayDuration = () => {
          if (seekSlider) {
            seekSlider.max = audioPlayerElement.duration.toString();
          }
        };

        audioPlayerElement.addEventListener('loadedmetadata', () => {
          displayDuration();
        });

        playButtons.forEach((btn) => {
          btn.addEventListener('change', () => {
            if (btn.checked) {
              audioPlayerElement.src = btn.dataset.audioUrl;
              if (
                currentAudioPlayer &&
                currentAudioPlayer !== audioPlayerElement
              ) {
                currentAudioPlayer.pause();
                currentPlayButton.checked = false;
              }
              currentAudioPlayer = audioPlayerElement;
              currentPlayButton = btn;
              audioPlayerElement.play().catch((error) => {
                if (error.name !== 'AbortError') {
                  console.error('Audio play interrupted:', error);
                }
              });
            } else {
              audioPlayerElement.pause();
            }
          });
        });

        seekSlider?.addEventListener('input', () => {
          audioPlayerElement.currentTime = parseFloat(seekSlider.value);
        });

        seekSlider.addEventListener('change', () => {
          audioPlayerElement.currentTime = parseFloat(seekSlider.value);
        });

        audioPlayerElement.addEventListener('timeupdate', () => {
          if (seekSlider) {
            seekSlider.value = Math.floor(
              audioPlayerElement.currentTime
            ).toString();
          }
        });

        audioPlayerElement.addEventListener('play', () => {
          if (currentPlayButton) {
            currentPlayButton.checked = true;
          }
        });

        audioPlayerElement.addEventListener('pause', () => {
          if (currentPlayButton) {
            currentPlayButton.checked = false;
          }
        });
      });
    }

    function reinitializeOnNavigation() {
      const links = document.querySelectorAll('a');
      links.forEach((link) => {
        link.addEventListener('click', (e) => {
          const url = link.href;
          const isSamePageLink =
            link.getAttribute('href') === window.location.pathname;
          if (!isSamePageLink) {
            e.preventDefault();
            fetch(url)
              .then((response) => response.text())
              .then((html) => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newContent = doc.querySelector('main');
                document.querySelector('main').innerHTML = newContent.innerHTML;
                document.dispatchEvent(new Event('contentLoaded'));
              })
              .catch((error) =>
                console.error('Error loading new content:', error)
              );
          }
        });
      });
    }

    initializePodcastCards();
    reinitializeOnNavigation();

    window.addEventListener('load', initializePodcastCards);
    document.addEventListener('contentLoaded', () => {
      if (currentAudioPlayer) {
        currentAudioPlayer.pause();
        currentPlayButton.checked = false;
      }
      initializePodcastCards();
      reinitializeOnNavigation();
    });

    document.addEventListener('astro:after-swap', () => {
      initializePodcastCards();
    });
  });
</script>
